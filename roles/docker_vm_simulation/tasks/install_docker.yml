---
- become: true
  block:
  # - name: conflicting packages are uninstalled.
  #   apt:
  #     name: "{{ item }}"
  #     state: absent
  #   loop:
  #     - docker.io
  #     - docker-doc
  #     - docker-compose
  #     - podman-docker
  #     - containerd
  #     - runc
  #   become: true

  - name: Install aptitude
    apt:
      name: aptitude
      state: latest
      update_cache: true

  - name: Install required system packages
    apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
        - python3-docker
        - python3-wheel
        - python3-yaml
      state: latest
      update_cache: true

  # - name: Add Docker GPG apt Key
  #   apt_key:
  #     url: https://download.docker.com/linux/ubuntu/gpg
  #     state: present

  - name: Check if docker.gpg exists
    stat:
      path: /etc/apt/keyrings/docker.gpg
    register: docker_gpg
    
  - name: Download Docker GPG key
    get_url:
      url: https://download.docker.com/linux/ubuntu/gpg
      dest: /tmp/docker.gpg
    become: true
    when: not docker_gpg.stat.exists

  - name: De-armor the GPG key
    command: 
      cmd: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.gpg
    become: true
    when: not docker_gpg.stat.exists

  - name: Set permissions on docker.gpg
    file:
      path: /etc/apt/keyrings/docker.gpg
      mode: '0644'
    become: true

  - name: Add Docker Repository
    apt_repository:
      repo: "deb [signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
      state: present

  - name: Update apt and install docker-ce
    apt:
      name: "{{ item }}"
      state: latest
      update_cache: true
    loop:
      - docker-ce
      - docker-ce-cli
      - docker-compose-plugin
      - docker-buildx-plugin
      - containerd.io

  # - name: Install Docker Module for Python
  #   pip:
  #     name: docker

  - name: Make sure docker started and enabled
    service:
      name: docker
      state: started
      enabled: yes

  # - name: Force-install collection community.docker to ensure community.docker.docker_compose_v2 works
  #   community.general.ansible_galaxy_install:
  #     type: collection
  #     name: community.docker
  #     force: true
  #   become: true

  - name: Install collection community.docker to ensure community.docker.docker_compose_v2 works, for root user
    command: "ansible-galaxy collection install {{ item.role_name }}"
    args:
      creates: "{{ item.role_path }}"
    loop: 
      - role_name: community.docker
        role_path: "~/.ansible/collections/ansible_collections/community/docker"
    become: true
  
  - name: Install collection community.docker to ensure community.docker.docker_compose_v2 works, for non-root user
    command: "ansible-galaxy collection install {{ item.role_name }}"
    args:
      creates: "{{ item.role_path }}"
    loop: 
      - role_name: community.docker
        role_path: "~/.ansible/collections/ansible_collections/community/docker"
    become: false

  - name: Refresh Ansible cache to recognize newly installed collections
    meta: refresh_inventory    
  when: ansible_os_family == 'Debian'
